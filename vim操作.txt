## VIM基础

### vim配置

VIM 有一个配置文件，在 linux 系统中，该配置文件是 .vimrc , 该文件位于 ～ 目录下面 （～ 目录是家目录，也就是用户目录，不了解的可以科学上网查询），是一个隐藏文件，如果该文件不存在可以手动创建一个。

.vimrc 可以有很多配置，例如显示行号，快捷键配置，插件配置等等。VIM 很多个性化的设置都离不开这个配置文件。**zempty 认为 .vimrc 有一个特别重要的配置，那就是配置如下的一行：**

```text
 #将ESC键映射为两次j键                                      
inoremap jj <Esc>
```

这个配置是将 <ESC> 功能键用 jj (连续按两次 j) 来取代。这个配置可以很大程度提高 VIM 的使用效率，下文的讲解 zempty 都会用 jj 来取代键盘上的 <ESC>。



### VIM 执行 Linux 命令

`:!command`  `:` 后面紧跟着 `!` ，`!` 后面紧跟着 linux 命令（ command 指操作 Linux 系统的一系列命令，如创建文件，新建文件夹，查询文件的属性的等），例子如下，

`:!date`  执行 date 命令显示时间，执行完命令以后按下键盘上的 Enter 就会返回到文件。

##### VIM 执行命令，并且添加结果至操作文本光标处

`:r !command` ` : `后面紧跟着 r , r 后面是空格，紧接着是 !command( command 解释同上)，例子如下，

`:r !date`  执行 date 命令显示时间，并且添加命令结果到文本中。

##### 定义快捷键

下面举例说明：

`:map ^M I#`  上面的例子也就是通过快捷键 `Ctrl + m` 在文件光标处所在行的行首插入 # （ # 代表注释）。

`:` 后面的 map 是关键字 ，后面是 key 和 value 。

key 对应的是 `^M` ， 这个 key 需要强调一下 `^M` 是 `Ctrl + v + m` 打出来的（按下这三个键，VIM 会显示成 `^M` ）,`^M` 代表快捷键是`Ctrl + m` , `Ctrl + v + n` 就是 ^N ,代表快捷键是 `Ctrl + n` 。`Ctrl + v + x` 就是 `^X` (这里的 x 是代表 26 个字母中的任意一个) 代表快捷键 `Ctrl + x`。

value 对应的是 `I#`,表示按下快捷键以后执行的相应操作，`I` 是切换光标至行首并切换到编辑模式，`#`是行首输入的内容（ # 是VIM 文件中的注释符号 ），`Esc` 是退出编辑模式。

举例如下：

`:map ^D Ahelloworld`表示在文件的光标所在行的行尾，添加 helloworld 字符串，按住组合键 ctrl + d 就会执行操作。

##### 使用 ab

`:ab email kickcodeman@gmail.com`  `:` 后面的 ab 是关键字 ,该命令执行后，然后切换到编辑模式下,输入 email 会把输入的 email 自动替换成 kickcodeman@gmail.com。

这个命令主要是处理频繁输入同样的长串字符串。



### vim打开文件

打开多个文件：`vim file1 file2`

切换文件：命令模式下，`:ls`    `:bn` (n为文件序列号，1，2，3，4···)

左右分屏显示：`vim -On file1 file2 file3`		(大写O，n为具体要打开文件的数目)

上下分屏显示：`vim -on file1 file2 file3`		(小写o，n为具体要打开文件的数目)

### vim分屏操作

上下分割：`Ctrl + w s`		`:sp file`

左右分割：`Ctrl + w v `		`:vsp file`

### 分屏后移动

##### 切换左右分屏的光标

将当前光标定位到左边的屏幕：`Ctrl + w h`

将当前的光标定位到右边的屏幕：`Ctrl + w l`

##### 移动左右分屏

将当前的分屏移动到左边：`Ctrl + w H`

将当前的分屏移动到右边：`Ctrl + w L`

##### 切换上下分屏的光标

将当前的光标移动到下面的分屏：`Ctrl + w j`

将当前光标移动到上面的分屏：`Ctrl + w k`

##### 移动上下分屏

将当前的分屏移动到下面的分屏：`Ctrl + w J`

将当前的分屏移动到上面的分屏：`Ctrl + w K`

##### 关闭分屏

关闭当前分屏：`Ctrl + w c`

关闭并保村：`Ctrl + w q`

##### 保存

另存为：`:saveas file`



### 命令模式

##### 行号

**文本的行号设置最好不要设置在配置文件中（因为复制文件的时候行号的出现会很麻烦），在命令行实现就好**。

`:set nu` 该命令会显示行号。

`:set nonu` 该命令会取消行号。

`:n` 定位到 n 行。

##### 关键字查找

`/{目标字符串}`   查找文本中匹配的目标字符串，查到以后，输入键盘上的 n 会去寻找下一个匹配，N 会去寻找上一个匹配。 如：/zempty 会在文本中匹配 zempty 的地方高亮。

##### 处理大小写的区分

`:set ic` 不区分大小写。如果你进行该设置之后，进行关键字查询如 /zempty 如果文本中有 Zempty ,zEmpty,....,只要是字符相同不会区分大小写都会进行匹配。

`:set noic` 区分大小写的查询。

##### 删除多行文本

`:n1,n2d`  n1和n2指的是起始行号和结束行号，d 是删除关键字

##### 处理文本的替换

`:{作用范围}s/{目标}/{替换}/{替换的标志}`  作用范围分为当前行、全文、选区等等。

`:s/zempty/handsome/g`  将会把当前光标所在行的 zempty 替换成 handsome

`:%s/zempty/handsome/g`  将会把全文中的 zempty 替换成 handsome

`:n1,n2s/zempty/handsome/g`  这里的 n1 和 n2 值得是行号，将会替换掉 n1 到 n2 的所有 zempty 为 handsome.

选区，在可视模式下选择区域后输入` : `，VIM 会自动补全为 `:'<,'>`。

`:'<,'>s/zempty/handsome/g`   这个操作咋一看起来有点懵逼，这个操作是可视模式 (Visual-mode) 下选区中的替换操作（可视模式下文会谈到），可视模式下输入`：`会自动补全 `:'<,'>` 这个是可视范围下的操作范围，类似于 % 和 n1,n2，代表操作的文本范围，上面的例子就是替换掉可视区域的 zempty 为 handsome。



下面来谈谈替换的标志

上文中命令结尾的 `g `即是替换标志之一，表示全局 `global `替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：

空替换标志表示只替换从光标位置开始，目标的第一次出现

`:s/zempty/handsome`  作用于当前行，从光标处开始查找替换，仅仅替换第一次匹配 zempty 的地方为handsome 。

`:%s/zempty/handsome`  替换掉文件中所有行第一次出现 zempty 的地方为 handsome 。

i 表示大小写不敏感查找，I 表示大小写敏感：

`:%s/zempty/handsome/i`  替换掉所有行第一个出现 zempty (不区分大小写) 为 handsome 。

`:%s/zempty/handsome/gi`   替换掉所有行出现 zempty (不区分大小写) 为 handsome 。

c 表示需要确认，例如全局查找"zempty"替换为"handsome"并且需要确认：`:%s/zempty/handsome/gc` 





### 编辑模式

##### 插入模式

`i`是在光标所在的字符之前插入需要录入的文本。

`I` 是在光标所在行的行首插入需要录入的文本。

`a` 是在光标所在的字符之后插入需要录入的文本。

`A` 是在光标所在行的行尾插入需要录入的文本。

`o` 是光标所在行的下一行行首插入需要录入的文本。

`O` 是光标所在行的上一行行首插入需要录入的文本。

`s` 删除光标所在处的字符然后插入需要录入的文本。

`S` 删除光标所在行，在当前行的行首开始插入需要录入的文本。

 `cw` 删除从光标处开始到该单词结束的所有字符，然后插入需要录入的文本

##### 快速移动光标

几个重要的快捷键

请记住这几个快捷键 `h,j,k,l` 这几个按键主要是用来快速移动光标的，`h` 是向左移动光标，`l` 是向右移动光标，`j` 是向下移动光标，`k` 是向上移动光标，`h , j , k ,l` 在主键盘区完全可以取代键盘上的 `↑ ,↓ ,← , →` 的功能。

##### 在当前行上移动光标

`0 `移动到行头

`^` 移动到本行的第一个不是 blank 字符

`$` 移动到行尾

`g_` 移动到本行最后一个不是 blank 字符的位置

`w` 光标移动到下一个单词的开头

`e` 光标移动到下一个单词的结尾

`fa` 移动到本行下一个为 a 的字符处，fb 移动到下一个为 b 的字符处

`nfa` 移动到本行光标处开始的第 n 个 字符为 a 的地方（n 是 1，2，3，4 ... 数字）

`Fa` 同 `fa` 一样，光标移动方向同 `fa` 相反

`nFa` 同 `nfa` 类似，光标移动方向同 `nfa`相反

`ta` 移动光标至 a 字符的前一个字符

`nta` 移动到第二个 a 字符的前一个字符处

`Ta` 同 `ta` 移动光标方向相反

`nTa` 同 `nta` 移动光标方向相反

`;` 和`,` 当使用 f, F, t ,T, 关键字指定字符跳转的时候，使用 `；`可以快速跳转到写一个指定的字符，`, `是跳到前一个指定的字符

##### 跨行移动光标

`nG `光标定位到第 n 行的行首

`gg `光标定位到第一行的行首

`G `光标定位到最后一行的行首

`H `光标定位到当前屏幕的第一行行首

`M` 光标移动到当前屏幕的中间

`L` 光标移动到当前屏幕的尾部

`zt` 把当前行移动到当前屏幕的最上方，也就是第一行

`zz` 把当前行移动到当前屏幕的中间

`zb` 把当前行移动到当前屏幕的尾部

`%` 匹配括号移动，包括 ( , { , [ 需要把光标先移动到括号上

`*` 和 `#` 匹配光标当前所在的单词，移动光标到下一个（或者上一个）匹配的单词（ `*` 是下一个，`#` 是上一个）

##### 翻页操作

`ctrl+f` 查看下一页内容

`ctrl+b` 查看上一页内容

##### VIM 的复制，黏贴 ，删除

三个重要的快捷键 `d` , `y` , `p`

`d` 是删除的意思，通常搭配一个字符 ( 删除范围 ) 实现删除功能，常用的如下：

`dw` 删除一个单词

`dnw` 删除 n 个单词，

`dfa` 删除光标处到下一个 a 的字符处（ fa 定位光标到 a 处 ）

`dnfa` 删除光标处到第 n 个 a 的字符处

`dd` 删除一整行

`ndd` 删除光标处开始的 n 行

`d$` 删除光标到本行的结尾

`dH` 删除屏幕显示的第一行文本到光标所在的行

`dG` 删除光标所在行到文本的结束

---

`y` 是复制的意思，通常搭配一个字符（复制范围）实现复制的功能，常用的如下：

```
yw` 复制一个单词，还有 `ynw
yfa` 复制光标到下一个 a 的字符处,还有`ynfa
yy` 复制一行，还有 `nyy
```

`y$` 复制光标到本号的结尾

`yH` 复制屏幕显示的第一行文本到光标所在的行

`yG` 复制光标所在行到文本的结束

---

`p` ，`P`是黏贴的意思，当执行完复制或者黏贴的命令以后，VIM 会把文本寄存起来。

`p` 在光标后开始复制

`P` 大写的 P 光标前开始复制

##### 撤销操作和恢复

`u` 撤销刚才的操作

`ctrl + r` 恢复撤销操作

##### 删除字符操作和替换

`x` 删除光标当前所在的字符

`r` 替换掉光标当前所在的字符

`R` 替换掉从光标开始以后的所有字符，除非 `` 退出，或者 `jj` （代替 <ESC> 上文有提到）退出。

##### 大小写转换

~ 将光标下的字母改变大小写
3~ 将光标位置开始的3个字母改变其大小写
g~~ 改变当前行字母的大小写
gUU 将当前行的字母改成大写
guu 将当前行的字母全改成小写

3gUU 将从光标开始到下面3行字母改成大写
gUw 将光标下的单词改成大写。
guw 将光标下的单词改成小写

##### VIM 的重复命令

. 该命令是重复上一个操作的命令
n<command>重复某个命令 n 次，
如 10p复制 10 次，10dd 删除十次。

### VIM 可视化模式

##### v,V,Ctrl+v

v字符可视化，按下键盘上的v以后，屏幕底部应该会有一个 VISUAl 的提示，操作 h,j,k,l就选中文本，继续按 v 退出可视化模式。

V 行可视化，按下键盘上的 V 以后，屏幕底部应该有一个 VISUAL LINE 的提示，操作 j,k 可以向上或者向下以行为单位选中文本，继续按下 V 退出可视化模式。

Ctrl+v 块状可视化，按下键盘上的 Ctrl+v 以后，屏幕底部应该会有一个提示 VISUALBLOCK ，可以通过 h,j,k,l 块状的操作选择区域，这是很多编辑器都不可以做到的，继续按下 Ctrl+v 会退出可视化模式。

##### 可视化模式下操作文本

可视化模式下选择操作区域以后，
按下 d会删除选择的区域，
按下 y 会复制选择的区域，按下 p 会黏贴选择的区域。

##### 可视化模式下 v 的特殊操作

当操作的文本光标在 “”，‘’ ，（），{} ，[（双引号，单引号，小括号，大括号，中括号）
当中的时候,可以通过 va"选中 ”“ 内的所有内容包括双引号 ，vi" 选中 "" 内的所有内容，不包括 ""。va,vi 会快速选择区域，va 后面会紧跟一个区域结束标志，a 会选中结束符标志，i 就不会。例子如下：

"hello world [VIM is so strong],{we all can master vim skill}"

假设当前光标定位在上面的文本 M 处：
va] 操作将会选中以下文本（加粗部分）：
“hello world **[VIM is so strong]**,{we all can master vim skill}“
vi] 操作将会选中如下的区域，没有包含 []：
“hello world [**VIM is so strong**],{we all can master vim skill}“

##### 块区域下的特殊操作

Ctrl+v 选中块区域以后，按下大写的 I 或者 A 可以在区域的前面或者后面输入内容，按下 jj 或者 <ESC>,可以看到选中的区域前面或者后面会有输入的内容。

##### VIM 的代码提示功能

在编辑模式下 ，快捷键 Ctrl+n 或者 Ctrl+p 会有代码提示功能，我们可以实现快速录入的效果。

##### VIM 的宏录制

假设需要操作的文本如下,需要将如下的多行文本的首行键入一个 tab 键。

hello
hello world
hello world , vim

##### 宏录制的录制操作

先将光标移动到第一行，在普通模式下按下 q 键（宏录制是 q 键启动的),在按一个 a （字母随意）,表示该宏注册为 a ，按下 I 在行首插入一个 tab 键，按下jj或者 <ESC>退出编辑模式,按下 j 将光标移动到下一行行首，最后按下 q 键完成录制操作（宏录制是 q 键结束的）。
总结上面例子的操作流程：
q → a → I → tab → jj → j → q
上面的例子成功地把在行首插入 tab 的功能录制了下来，那么如何应用到其他行呢？

##### 宏录制的使用

上述的例子，在正常模式下，按 @a执行宏录制的一系列动作，将会在第二行执行插入 tab 。
@@ 是对上一次宏使用的重复操作。n@a 就会执行 n 次一系列的动作。使用宏录制可以一次执行一系列的操作，可以针对一些重复度较高的操作进行宏录制。









## vim进阶

### 缓冲区(buffer)



#### 什么是 vim 缓冲区 ？



在弄清楚 Buffer / Window / Tab之前看一下下面这张图：



![img](image/v2-20c4faeb143359b6da405ce558050177_hd.jpg)



我们用 vim 一次性打开多个文件 ：

如：

```text
 vim test1 test2 test3 
```

界面可以看到，只会显示 test1 文件，其他俩个呢？ 其实都打开了，vim 把这三个文件都缓存起来了，只是显示出来的是第一个文件 test1 的内容而已，



vim 打开文件的时候就会创建缓冲区，打开几个就创建几个缓冲区，默认加载第一个缓冲区，显示第一个文件的内容。vim 的官方解释：缓冲区是一个文件的内容占用的那部分vim内存。



> A buffer is an area of Vim’s memory used to hold text read from a file. In addition, an empty buffer with no associated file can be created to allow the entry of text.



#### 怎么样使用缓冲区？



下面列出几个操作缓冲区的常用命令：

```text
:ls  
```

列出所有的缓冲区



```text
:bn
```

切换下一个缓冲区，显示下一个文件的内容



```text
:bp 
```

切换上一个缓冲区，显示上一个文件的内容



```text
:b number  
```

这里的 number 是缓冲区的一个数字编号，当 :ls 显示缓冲区的时候都会显示出一个缓冲区的编号



```text
:b fileName  
```

这里的 fileName 是一个具体的文件名称，文件名称可以是正则表达式，也可以是文件名中的个别字母，一旦匹配就会加载该缓冲区，显示该文件。

### 窗口(window)

#### 什么是 vim 窗口 ？

![img](https://pic4.zhimg.com/80/v2-20c4faeb143359b6da405ce558050177_hd.jpg)

使用 vim 打开文件，呈现在你眼前的文件内容就是窗口，窗口是用来查看缓冲区的内容的。你可以用多个窗口查看同一个缓冲区，也可以用多个窗口查看不同的缓冲区。

#### 怎么使用窗口 ？

可以在文章 [精通 VIM ，此文就够了](https://zhuanlan.zhihu.com/p/68111471) 中的分屏操作中看到一些详细操作。

### 标签 (Tab)

#### 什么是 Tab ?

![img](https://pic4.zhimg.com/80/v2-20c4faeb143359b6da405ce558050177_hd.jpg)

用过浏览器打开网页的我们都知道，打开网页的时候在浏览器的上方通常会有一个网页标签，这样方便我们快速切换不同的网页，vim 也有类似的概念，可以操考上图标记看到。

下面再来理清一下 Buffer / Window / Tab 三者之间的概念：

Buffer 是 vim 打开文件的时候创建的一个缓冲区，用来存储打开的文件 。 使用 vim 每打开一个文件就会创建一个 Buffer 。

窗口是用来展示 Buffer 的信息的，vim 之所以有 Buffer 的概念，大概就是窗口显示文件内容的时候，可以快速显示出来。

Tab 可以想象成浏览器中的标签页，不同之处是 vim 中的 一个Tab 可以有很多个窗口，每个窗口用来展示文件的内容信息。

我们通常可以根据我们的用途来创建 Tab ,比如：我在浏览一个项目，我可以创建两个 Tab , 一个 Tab 用来浏览前端代码， 一个 Tab 可以用来使用浏览后端代码。

下面列举一下关于 Tab 常见的几个命令如下：

```text
:tabnew  web
```

使用 ：tabnew 创建一个名字叫 web 的 tab ,当然名字也可以没有，这样会创建一个没有名字的 tab

```text
:tabc
```

关闭当前的 tab

```text
:tabn
```

切换到下一个 tab

```text
:tabp 
```

切换到上一个 tab

```text
:tabs 
```

查看一共有几个 tab

```text
gt 
```

这个是一个快捷键在正常模式下按下键盘上的 g 和 t 就会自动切换 tab

```text
1gt
```

这是上一个命令的拓展，按下数字键（1，2，3，4……）和 gt ,将切换到相应顺序的 tab, tab 的序号默认从 1 开始，上面的命令将会切换到第一个 tab 。

### 标记 （mark)

#### 什么是 mark ?



我们通常在读一本很厚的书的时候，通常会加上一个书签，用来标记我们的进度，在 vim 当中也有一个类似的概念，我们也可以使用 vim 在我们的文件上打上一个标记，方便我们快速的跳到这个位置。

#### 如何使用 mark ?

按下键盘上的 m , 紧跟着在按下键盘上的（a-zA-Z）当中的任何一个字母，这样一个标记 （mark）例如 ma, mA 这样一个名字叫做 a 或者 A 的标记就建立起来了。

例如 :

```text
`ma 
```

意思在当前文件的光标所在的行建立了一个标记，以后我们可以快速定位到这个位置。

#### 如何激活标记？

使用 ‘（单引号） 或者 ` (常规键盘靠近数字键 1 左边的按键，我这里就做撇号) ，紧接着按下当初标记的那个字母就会跳到当初标记的那个位置。

例如 ：

`a 和 ‘a

##### ‘a 和 `a有什么区别呢？

‘a （也就是单引号+a） 是跳转到当初标记的行首

`a (也就是撇号+a) 实跳转到当初标记的时候光标所在的位置

##### ‘ 和 ` 的 区别总结

‘（单引号）通常用来跳转到标记的文本的行首

’ (撇号) 通常用来跳转到标记的光标的位置

##### ma` 和 mA有什么区别？

如果要是在文件之间跳转要使用大写的标记才可以，例如现在在当前文件的某处打了一个标记 mA , 离开该文件切换到了另一个文件，此时使用 ‘A 就可以返回之前文件打标记的地方了。

**结论：小写字母通常用来单个文件坐标记，大写字母通常是用来文件间坐标记。**

```text
:marks 
```

列出所有的标记

```text
:delmarks  a 
```

删除 a 标记 ,也可以一次删除多个标记，例如， :delmarks a b c d 这样就删除了 a , b , c , d 四个标记

```text
:delmarks!
```

删除所有的标记（删除所有小写字母的标记）

#### 总结：

m 是创建标记的关键字

a-zA-Z 是创建标记的名字，小写字母用来创建单个文件的标记，大些字母用来创建文件之间的标记。

` 撇号通常用来定位到之前光标所在的位置

‘ 单引号通常用来定位到标记所在的行

:marks 显示所有的标记

:delmarks 删除指定的标记

:delmarks! 删除所有标记（大些字母的标记除外）

### 寄存器(register)

#### 什么是 vim 的寄存器？

顾名思义，一个存东西的机器， 在 [精通 vim , 此文就够了] 文章中，我详细的列举了复制和黏贴的一些操作，你有没有想过使用 vim 复制东西的时候，它复制到哪里去了呢？

在使用不同操作系统的时候，我们经常会使用复制和黏贴的功能，当我们复制内容的时候，系统把内容放到了剪切板，当我们黏贴使用的时候就会快速的从剪切板里面获取内容。

vim 也有相似的逻辑，当我们使用 y 复制内容的时候，vim 默认把内容寄存到一个无名寄存器，当使用黏贴功能 p 的时候，就会默认从无名寄存器中取出内容。

#### vim 如何定义一个有名字的寄存器？

vim 默认使用的是无名寄存器，通常情况下我们使用是没有问题的，但是我就想把东西存到一个有名字的地方。

vim 通常使用 “（双引号）加上一个 a-z 的字母来给定义一个有名字的寄存器。

例如如下：

“ayy 表示的是复制当前行内容到 a 寄存器当中

“ap 表示的是从 a 寄存器当中取出内容

#### vim 如何查看所用寄存器寄存内容呢？

```text
:reg
```

该命令会列出所有的寄存器

```text
:reg a
```

会查看 a 寄存器里寄存的内容

#### 如何使用自己命名的寄存器呢？

举例如下：

“ap 使用 p 黏贴命令就可以从指定的寄存器中取出内容了，该例就是从 a 寄存器中取出内容。

#### 无名寄存器是怎么定义的？

“” 两个双引号就是一个无名寄存器，通常我们复制黏贴的时候都会自动启用这个寄存器。

#### 总结：

关于寄存器的用处，这里不去过多的研究了，因为平时用的就少，有兴趣的可以使用 `:help reg` 查看一下寄存器的详细使用方法。

记住这个一个符号 “ （双引号）可以用来定义寄存器哟！

### 插件

#### 什么是 vim 的插件？

vim 的插件就是解决用户需求的，比如你在 vim 中想拥有一些类似于 IDE 上的好用的功能，这样就需要插件来祝你一臂之力了。

vim 受很多人喜欢的原因之一可能就是 vim 有很多实用的插件，总有一款解决你的需求。

#### 插件应该怎么用？

我们可以通过插件管理器，把插件绑定到 vim 这款编辑器上，然后我们就可以在使用 vim 的时候使用插件提供的功能了。现在流行的 vim 插件管理器很多，都很好用，也可以 google 查询选择一款最适合自己的插件管理器来安装，更新，卸载插件，推荐一个比较好用流行的插件 [vim-plug](https://link.zhihu.com/?target=https%3A//github.com/junegunn/vim-plug) ,该插件管理器简单易用，github 上面也有很详细的安装教程，这里就不再此过多叙述，如果你使用该插件管理器有什么问题可以下方留言，有很多好心人会帮到你。

#### 在哪里寻找 vim 插件呢？

\1. google 搜索，针对你的需求提炼一下关键字，找找看

\2. 推荐一个插件网址：[VimOwesome](https://link.zhihu.com/?target=https%3A//vimawesome.com/)这里拥有很多好用的插件

\3. GitHub ,去 github 上找找看，很多好用的插件这里都可以找的到

\4. 知乎上找一找，有很多人分享好用的插件。

假如你是一个 vim 插件迷，或者有十分好用的插件，欢迎你在留言区推荐。

### vim 的脚本（Vimscript）

#### 什么是 Vimscript ?

我们可以类比一下 javascript ， Vimscript 是vim 的脚本语言，一门专注做 vim 的编程语言，上面提到的插件很多都是使用 Vimscipt 去实现的。

推荐一些学习 Vimscript 脚本的资源：

[Vimscript 前言_w3cschool](https://link.zhihu.com/?target=https%3A//www.w3cschool.cn/vim/ljkpbozt.html)

[Vimscript 英文脚本教程推荐](https://link.zhihu.com/?target=http%3A//learnvimscriptthehardway.stevelosh.com/)

如果你有好的资源欢迎你的推荐。